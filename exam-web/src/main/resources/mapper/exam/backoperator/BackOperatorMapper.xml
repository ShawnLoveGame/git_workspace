<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.he.exam.dao.exam.BackOperatorMapper" >
    <resultMap id="BaseResultMap" type="com.he.exam.model.backoperator.vo.BackOperatorVO" >
        <id column="id" property="id" jdbcType="BIGINT" />
        <result column="user_name" property="userName" jdbcType="VARCHAR" />
        <result column="password" property="password" jdbcType="VARCHAR" />
        <result column="real_name" property="realName" jdbcType="VARCHAR" />
        <result column="login_times" property="loginTimes" jdbcType="INTEGER" />
        <result column="last_login_date" property="lastLoginDate" jdbcType="TIMESTAMP" />

        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
        <result column="create_by" property="createBy" jdbcType="BIGINT" />
        <result column="update_by" property="updateBy" jdbcType="BIGINT" />
        <result column="is_delete" property="isDelete" jdbcType="INTEGER" />
    </resultMap>

    <sql id="Base_Column_List" >
        id, user_name, password, real_name, last_login_date,  create_time,
        update_time, create_by, update_by, is_delete
    </sql>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
        select 
        <include refid="Base_Column_List" />
        from back_operator
        where id = #{id,jdbcType=BIGINT}
    </select>

    <select id="findBackendOperatorByName" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from back_operator
        where user_name = #{userName,jdbcType=VARCHAR} and is_delete = 0
    </select>


    <!-- 登录成功后更新用户信息 -->
    <update id="updateBackendOperatorAfterLogin" parameterType="com.he.exam.model.backoperator.dto.BackendOperatorDTO">
        update back_operator
        set 		login_times = login_times + 1,
        last_login_date = now(),
        update_time = now(),
        update_by = #{updateBy,jdbcType=BIGINT}
        where 	user_name = #{userName,jdbcType=VARCHAR}
    </update>

    <select id="countFindBackUserWithPg" parameterType="com.he.exam.model.backoperator.dto.BackendOperatorDTO" resultType="int">
        select count(1)
        from back_operator
        where is_delete = 0
        <if test="userName != null and userName != '' ">
            and user_name = #{userName,jdbcType=VARCHAR}
        </if>
        <if test=" realName != null and realName != '' ">
            and real_name =  #{realName,jdbcType=VARCHAR}
        </if>
    </select>
    <select id="findBackUserWithPg" parameterType="com.he.exam.model.backoperator.dto.BackendOperatorDTO" resultMap="BaseResultMap">
        select  <include refid="Base_Column_List" />
        from back_operator
        where is_delete = 0
        <if test="userName != null and userName != '' ">
            and user_name like CONCAT('%',#{userName,jdbcType=VARCHAR} , '%')
        </if>
        <if test=" realName != null and realName != '' ">
            and real_name like CONCAT('%',#{realName,jdbcType=VARCHAR} , '%')
        </if>
        <if test=" operatorStatus != null ">
            and operator_status = #{operatorStatus}
        </if>
        <if test="needCount != null and needCount == true">
            limit #{start} , #{rows}
        </if>
    </select>

    <select id="findBackendOperatorVOs" parameterType="com.he.exam.model.backoperator.dto.BackendOperatorDTO" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from 	back_operator
        where	is_delete = 0
        <if test="id != null">
            and id != #{id,jdbcType=BIGINT}
        </if>
        and user_name = #{userName,jdbcType=VARCHAR}
    </select>

    <!--  根据dto(用户名+运营商id)查询用户信息 -->
    <select id="findBackendOperatorByDTO" parameterType="com.he.exam.model.backoperator.dto.BackendOperatorDTO" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from 	back_operator
        where 	is_delete = 0
        and 		operator_status = 1
        and   	user_name = #{userName,jdbcType=VARCHAR}
    </select>

    <insert id="insert" parameterType="com.he.exam.model.backoperator.BackOperator" useGeneratedKeys="true" keyProperty="id">
        insert into back_operator (id, user_name, password, real_name, last_login_date,  create_time,
        update_time, create_by, update_by, is_delete)
        values (#{id,jdbcType=BIGINT}, #{userName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
            #{realName,jdbcType=VARCHAR},  #{lastLoginDate,jdbcType=TIMESTAMP},
           now(),now(), #{createBy,jdbcType=BIGINT},
            #{updateBy,jdbcType=BIGINT}, 0)
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.he.exam.model.backoperator.BackOperator" >
        update back_operator
        <set >
            <if test="userName != null" >
                user_name = #{userName,jdbcType=VARCHAR},
            </if>
            <if test="password != null" >
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="realName != null" >
                real_name = #{realName,jdbcType=VARCHAR},
            </if>
            <if test="lastLoginDate != null" >
                last_login_date = #{lastLoginDate,jdbcType=TIMESTAMP},
            </if>
            <if test="createTime != null" >
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null" >
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createBy != null" >
                create_by = #{createBy,jdbcType=BIGINT},
            </if>
            <if test="updateBy != null" >
                update_by = #{updateBy,jdbcType=BIGINT},
            </if>
            <if test="isDelete != null" >
                is_delete = #{isDelete,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
        delete from back_operator
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <update id="deleteBackOperatorByDTO" parameterType="com.he.exam.model.backoperator.dto.BackendOperatorDTO">
        update back_operator bo
            set 		bo.is_delete = 1,
                        bo.update_by = #{updateBy},
                        bo.update_time = now()
            where 	bo.is_delete = 0
            and  		bo.id = #{id}
    </update>

</mapper>